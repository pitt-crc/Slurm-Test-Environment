name: Publish Docker Images

on:
  # These triggers will build and test the image(s)
  workflow_dispatch:
  pull_request:

  # These triggers will build, test, and publish the image(s)
  release:
    types: [ published ]
  push:
    branches: [ "latest" ]

jobs:
  define-build-options:
    runs-on: ubuntu-latest
    name: Define Build Options
    steps:
      - name: Define build matrix
        id: build-matrix
        run: |
          MATRIX='{
            "rocky-tag": [ "8" ], 
            "slurm-tag": [ "slurm-20-02-5-1", "slurm-20-11-9-1", "slurm-22-05-2-1" ], 
            "python-tag":[ "python36", "python38", "python39" ]
          }'
          
          echo ::set-output name=build-matrix::$MATRIX}

    outputs:
      build-matrix: ${{ steps.build-matrix.outputs.build-matrix }}

  build:
    needs: [ define-build-options ]
    runs-on: ubuntu-latest
    name: Build and Test Images

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.define-build-options.outputs.build-matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Define the image name for use by other steps
      - name: Define image name
        id: image-name
        run: |
          NAME=test-env-rocky${{ matrix.rocky-tag }}-${{ matrix.slurm-tag }}-${{ matrix.python-tag }}
          echo ::set-output name=name::$NAME

      # Extract metadata (tags and labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.name }}

      # Build the image but do not publish it
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=image.tar
          build-args: |
            SLURM_TAG=${{ matrix.slurm-tag }}
            ROCKY_TAG=${{ matrix.rocky-tag }}
            PYTHON_TAG=${{ matrix.python-tag }}

      # Make sure sacctmgr executes
      - name: Test slurm install
        run: |
          docker load --input image.tar
          docker run --rm ${{ steps.meta.outputs.tags }} sacctmgr --version

      # Cache the built image for use in other jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.image-name.outputs.name }}
          path: image.tar
          if-no-files-found: error

  # This is a dummy job used to facilitate branch protections
  # and trigger auto-merging when all jobs in the build matrix
  # exit successfully.
  build-successful:
    needs: [ define-build-options, build ]
    runs-on: ubuntu-latest
    name: Builds Were Successful
    
    steps:
      - name: Mark as completed
        run: echo "The builds were successful"

  # Publish when updating the latest branch
  # or when making a new release
  publish:
    if: |
      (github.ref == 'refs/heads/latest' && github.event_name == 'push') || 
      (github.event_name == 'release')
    needs: [ define-build-options, build ]
    runs-on: ubuntu-latest
    name: Publish Docker Images

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.define-build-options.outputs.build-matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Define the image name for use by other steps
      - name: Define image name
        id: image-name
        run: |
          NAME=test-env-rocky${{ matrix.rocky-tag }}-${{ matrix.slurm-tag }}-${{ matrix.python-tag }}
          echo ::set-output name=name::$NAME

      - name: Fetch image from cache
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.image-name.outputs.name }}
          path: .

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish fetched image
        run: |
          docker load --input image.tar
          docker push ghcr.io/${{ github.repository_owner }}/${{ steps.image-name.outputs.name }}:${{ github.ref_name }}

  delete-old:
    if: github.event_name != 'release'
    needs: [ define-build-options, publish ]
    name: Delete Old Images
    uses: .github/workflows/docker-cleanup.yml@${{ github.ref }}
